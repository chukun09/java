class Node {
    int key, height;
    Node left, right;

    Node(int d) {
        key = d;
        height = 0;
    }
}
class AVLTree {

    Node root;

    // A utility function to get the height of the tree
    int height(Node N) {
        if (N == null)
            return 0;

        return max(height(N.left), height(N.right)) + 1;
    }

    // A utility function to get maximum of two integers
    int max(int a, int b) {
        return (a > b) ? a : b;
    }

    // A utility function to right rotate subtree rooted with y
    //   y                               x
        / \     Right Rotation          / \
       x   T3   - - - - - - - >        T1  y 
      / \                     		  	  / \
     T1  T2     			            T2   T3
    
	Node rightRotate(Node y) {
        Node x = y.left;
        Node T2 = x.right;

        // Perform rotation
        x.right = y;
        y.left = T2;

        // Update heights
        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;

        // Return new root
        return x;
    }

    // A utility function to left rotate subtree rooted with x
    //   x                               y
		/ \     Left Rotation           / \
	   T1  y    - - - - - - - >        x   T3 
	      / \            			  / \
	    T2   T3 			        T1   T2 
    
	Node leftRotate(Node x) {
        Node y = x.right;
        Node T2 = y.left;

        // Perform rotation
        y.left = x;
        x.right = T2;

        //  Update heights
        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;

        // Return new root
        return y;
    }

    // Get Balance factor of node N
    int getBalance(Node N) {
        if (N == null)
            return 0;

        return height(N.left) - height(N.right);
    }

    Node insert(Node node, int key) {

        /* 1.  Perform the normal BST insertion */
        if (node == null)
            return (new Node(key));

        if (key < node.key)
            node.left = insert(node.left, key);
        else if (key > node.key)
            node.right = insert(node.right, key);
        else // Duplicate keys not allowed
            return node;

        /* 2. Update height of this ancestor node */
        node.height = 1 + max(height(node.left), height(node.right));

        /* 3. Get the balance factor of this ancestor node to check whether this node became unbalanced */
        int balance = getBalance(node);

        // If this node becomes unbalanced, then there are 4 cases:
		
        // Left Left Case
		/* T1, T2, T3 and T4 are subtrees.
			z                                      y 
		   / \                                   /   \
		  y   T4      Right Rotate (z)          x     z
		 / \          - - - - - - - - ->      /  \   /  \ 
		x   T3                               T1  T2 T3  T4
	   / \
	 T1   T2												*/
        if (balance > 1 && key < node.left.key)
            return rightRotate(node);

        // Right Right Case
		/*   
			 z                                y
			/  \                            /   \ 
		   T1   y     Left Rotate(z)       z      x
			   /  \   - - - - - - - ->    / \    / \
			  T2   x                     T1  T2 T3  T4
				  / \
				 T3 T4									*/
        if (balance < -1 && key > node.right.key)
            return leftRotate(node);

        // Left Right Case
		/*
		 z                               z                           x
		/ \                            /   \                        /  \ 
	   y   T4  Left Rotate (y)        x    T4  Right Rotate(z)    y      z
	  / \      - - - - - - - - ->    /  \      - - - - - - - ->  / \    / \
	T1   x                          y    T3                    T1  T2 T3  T4
		/ \                        / \
	  T2   T3                    T1   T2
														*/
        if (balance > 1 && key > node.left.key) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }

        // Right Left Case
		/*
		 z                            z                            x
		/ \                          / \                          /  \ 
	  T1   y   Right Rotate (y)    T1   x      Left Rotate(z)   z      y
		  / \  - - - - - - - - ->     /  \   - - - - - - - ->  / \    / \
         x   T4                      T2   y                  T1  T2  T3  T4
		/ \                              /  \
	  T2   T3                           T3   T4	
														*/
        if (balance < -1 && key < node.right.key) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }

        /* return the (unchanged) node pointer */
        return node;
    }

    // A utility function to print pre-order traversal of the tree.
    // The function also prints height of every node
    void preOrder(Node node) {
        if (node != null) {
            System.out.print(node.key + " ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }
    public static void main(String[] args) {
        AVLTree tree = new AVLTree();

        /* Constructing tree given in the above figure */
        tree.root = tree.insert(tree.root, 5);
        tree.root = tree.insert(tree.root, 10);
        tree.root = tree.insert(tree.root, 6);
        tree.root = tree.insert(tree.root, 7);
        tree.root = tree.insert(tree.root, 13);
        tree.root = tree.insert(tree.root, 11);
        tree.root = tree.insert(tree.root, 4);
        tree.root = tree.insert(tree.root, 15);
        tree.root = tree.insert(tree.root, 16);
		/* The BST tree before constructed: 
		    5
		  /   \
		 4	  10
			 /  \
		    6    13
			 \   / \
			  7 11  15
					 \
					  16	
			
        /* The constructed AVL Tree would be
              10
			/    \
		   6     13
		  / \   /  \
		 5   7 11  15
		/		     \
	   4	         16
			
			
        */
        System.out.println("Pre-order traversal" + " of constructed tree is : ");
        tree.preOrder(tree.root);
        System.out.println();
        System.out.println(tree.root.height);
    }
}
